package org.anon;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.Arrays;
import java.util.Vector;

public class MainForm {
    private JTextField textField2;
    private JTextArea textArea1;
    private JTextField textField3;
    private JTextField textField4;
    private JButton sendButton;
    private JPanel panel1;
    private JTextField textField1;
    private JButton connectButton;
    private JButton setButton;
    private JList<String> list1;
    private JPopupMenu popupMenu1;
    private static JFrame frame;

    private Client client;
    private Thread handler;
    private String username;

    private static MainForm instance;

    private MainForm() {
        client = Client.getInstance();
        handler = null;
        username = "";

        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();

        connectButton.addActionListener((actionEvent) -> {
            try {
                if (!client.isConnected()) {
                    String host = textField1.getText();
                    int port = Integer.parseInt(textField2.getText());
                    if (port < 0 || port > 65535) throw new UserDefinedException("Invalid port number!");

                    setUsername();

                    client.connect(host, port, username);

                    String tmp = client.getIStream().nextLine();
                    switch (tmp) {
                        case "/auth":
                            new PassDialog().show();
                            break;
                        case "/noauth":
                            enableMessageSend(true);
                            break;
                        default:
                            textArea1.append(tmp + '\n');
                            break;
                    }

                    handler = new Thread(new InputHandler());
                    handler.start();
                } else {
                    setDisconnect();
                }
            } catch (NumberFormatException e) {
                showErrorMessage("Invalid port number!");
            } catch (UserDefinedException e) {
                showErrorMessage(e.getMessage());
            } catch (IOException e) {
                showErrorMessage("An error occurred while contacting server:\n" + e.getMessage());
            } catch (NullPointerException e) {
                showErrorMessage("An error has occurred:\n" + e.getMessage());
                e.printStackTrace();
            }
        });

        sendButton.addActionListener((actionEvent) -> send());

        textField3.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent keyEvent) {
                if (keyEvent.getKeyCode() == KeyEvent.VK_ENTER) {
                    send();
                }
            }
        });

        setButton.addActionListener((actionEvent) -> {
            try {
                setUsername();
            } catch (UserDefinedException e) {
                showErrorMessage(e.getMessage());
            }
        });

        list1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent mouseEvent) {
                if (SwingUtilities.isRightMouseButton(mouseEvent)) {
                    list1.setSelectedIndex(list1.locationToIndex(mouseEvent.getPoint()));
                    if (!list1.isSelectionEmpty())
                        popupMenu1.show(mouseEvent.getComponent(), mouseEvent.getX(), mouseEvent.getY());
                }

                if (SwingUtilities.isLeftMouseButton(mouseEvent)) {
                    String selected = list1.getSelectedValue();
                    if (selected != null && !selected.equals(username))
                        textField3.setText(textField3.getText() + '@' + list1.getSelectedValue() + ' ');
                    textField3.requestFocus();
                }
            }
        });

        DefaultContextMenu.addDefaultContextMenu(textArea1);
        DefaultContextMenu.addDefaultContextMenu(textField1);
        DefaultContextMenu.addDefaultContextMenu(textField2);
        DefaultContextMenu.addDefaultContextMenu(textField3);
        DefaultContextMenu.addDefaultContextMenu(textField4);
    }

    public void addMessage(String message) {
        textArea1.append(message + '\n');
    }

    public void setDisconnect() throws IOException {
        client.disconnect();
        enableMessageSend(false);
        list1.setListData(new String[]{});
        username = "";
    }

    public JFrame getFrame() {
        return frame;
    }

    public void enableMessageSend(boolean value) {
        if (value) {
            connectButton.setText("Disconnect");
            textField1.setEnabled(false);
            textField2.setEnabled(false);
            textField3.setEnabled(true);
            textField3.requestFocus();
            sendButton.setEnabled(true);
        } else {
            connectButton.setEnabled(true);
            setButton.setEnabled(true);
            textField4.setEnabled(true);

            connectButton.setText("Connect");
            textField1.setEnabled(true);
            textField2.setEnabled(true);
            textField3.setEnabled(false);
            sendButton.setEnabled(false);
        }
    }

    public void updateUserList(String[] users) {
        Vector<String> tmp = new Vector<>(Arrays.asList(users));
        tmp.remove(0);
        list1.setListData(tmp);
    }

    public static MainForm getInstance() {
        return instance;
    }

    public static void main(String[] args) {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("GTK+".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            System.out.println(ex.getMessage());
        }

        instance = new MainForm();

        frame = new JFrame("ChatAppTest");
        frame.setContentPane(instance.$$$getRootComponent$$$());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private void setUsername() throws UserDefinedException {
        String temp = textField4.getText();
        if (temp.equals("")) throw new UserDefinedException("Please enter the nickname!");
        if (!temp.matches("\\w+")) throw new UserDefinedException("Invalid username.");
        username = temp;
        if (client.isConnected()) client.renameUsername(username);
    }

    private void createUIComponents() {
        panel1 = new JPanel();
        textArea1 = new JTextArea();
        list1 = new JList<>();
        textArea1.setFont(new Font("Monospaced", Font.PLAIN, 12));

        JMenuItem p1m1 = new JMenuItem("Info");
        JMenuItem p1m2 = new JMenuItem("Kick");

        popupMenu1 = new JPopupMenu();
        popupMenu1.add(p1m1);
        popupMenu1.add(p1m2);

        p1m1.addActionListener(actionEvent -> {
            //showInfo
        });
        p1m2.addActionListener(actionEvent -> client.sendMessage("/kick " + list1.getSelectedValue()));
    }

    private void send() {
        String message = textField3.getText();
        client.sendMessage(message);
        textField3.setText("");
    }

    public void showErrorMessage(String message) {
        JOptionPane.showMessageDialog(panel1, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 8, new Insets(4, 4, 4, 4), -1, -1));
        panel1.setMinimumSize(new Dimension(400, 300));
        panel1.setName("");
        panel1.setPreferredSize(new Dimension(800, 600));
        panel1.setRequestFocusEnabled(true);
        final JLabel label1 = new JLabel();
        label1.setText("IP/Host");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Port");
        panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(24, 17), null, 0, false));
        textField2 = new JTextField();
        panel1.add(textField2, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        textField3 = new JTextField();
        textField3.setEnabled(false);
        panel1.add(textField3, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 6, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Message");
        panel1.add(label3, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Nickname");
        panel1.add(label4, new com.intellij.uiDesigner.core.GridConstraints(0, 5, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField4 = new JTextField();
        panel1.add(textField4, new com.intellij.uiDesigner.core.GridConstraints(0, 6, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, -1), null, 0, false));
        textField1 = new JTextField();
        textField1.setText("");
        panel1.add(textField1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        connectButton = new JButton();
        connectButton.setText("Connect");
        panel1.add(connectButton, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        setButton = new JButton();
        setButton.setText("Set");
        panel1.add(setButton, new com.intellij.uiDesigner.core.GridConstraints(0, 7, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sendButton = new JButton();
        sendButton.setEnabled(false);
        sendButton.setText("Send");
        panel1.add(sendButton, new com.intellij.uiDesigner.core.GridConstraints(2, 7, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 6, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textArea1.setAlignmentY(0.5f);
        textArea1.setEditable(false);
        textArea1.setLineWrap(true);
        textArea1.setText("");
        textArea1.setWrapStyleWord(true);
        textArea1.putClientProperty("html.disable", Boolean.FALSE);
        scrollPane1.setViewportView(textArea1);
        final JScrollPane scrollPane2 = new JScrollPane();
        panel1.add(scrollPane2, new com.intellij.uiDesigner.core.GridConstraints(1, 6, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, -1), null, 0, false));
        scrollPane2.setViewportView(list1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
